{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["extend","OrbitControls","defaultCameraPositions","px","rx","py","ry","pz","rz","texture1","THREE","load","texture2","texture3","flipY","App","useState","cameraPos","currentTex","setCurrentTex","Asset","url","gltf","useLoader","GLTFLoader","materials","default","map","object","scene","dispose","position","className","useThree","camera","domElement","gl","x","rotation","y","z","fallback","args","style","backgroundColor","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAOAA,YAAO,CAAEC,oBAET,IAAMC,EAAyB,CAC7BC,GAAI,mBACJC,IAAK,iBACLC,GAAI,mBACJC,GAAI,iBACJC,IAAK,kBACLC,GAAI,mBAEAC,GAAW,IAAIC,iBAAsBC,KAAK,+BAC1CC,GAAW,IAAIF,iBAAsBC,KAAK,+BAC1CE,GAAW,IAAIH,iBAAsBC,KAAK,+BAChDF,EAASK,OAAQ,EACjBF,EAASE,OAAQ,EACjBD,EAASC,OAAQ,EAiFFC,MA/Ef,WAAgB,IAAD,EACOC,mBAASd,GAAtBe,EADM,sBAEuBD,mBAAS,GAFhC,mBAENE,EAFM,KAEMC,EAFN,KAIb,SAASC,EAAT,GAAyB,IAARC,EAAO,EAAPA,IACTC,EAAOC,YAAUC,IAAYH,GAInC,OAHmB,IAAfH,IACFI,EAAKG,UAAUC,QAAQC,IAAMT,GAG7B,+BACEU,OAAQN,EAAKO,MACbC,QAAS,KACTC,SAAU,IAAIrB,UAAc,GAAI,IAAM,KAmC5C,OACE,yBAAKsB,UAAU,kBACb,yBAAKA,UAAU,sBACb,kBAAC,IAAD,KACE,mBAlCM,WAAO,IAAD,EAIdC,cAFFC,EAFgB,EAEhBA,OACMC,EAHU,EAGhBC,GAAMD,WAUR,OAPAD,EAAOH,SAASM,EAAIpB,EAAUd,GAC9B+B,EAAOI,SAASD,EAAIpB,EAAUb,GAC9B8B,EAAOH,SAASQ,EAAItB,EAAUZ,GAC9B6B,EAAOI,SAASC,EAAItB,EAAUX,GAC9B4B,EAAOH,SAASS,EAAIvB,EAAUV,GAC9B2B,EAAOI,SAASE,EAAIvB,EAAUT,GAG5B,oCACE,kBAAC,WAAD,CACEiC,SACE,kBAAC,IAAD,CAAKV,SAAU,IAAIrB,UAAc,IAAM,GAAK,IAC1C,yCAIJ,kBAACU,EAAD,CAAOC,IAAI,sCAEb,uCACA,gCAAYU,SAAU,CAAC,GAAI,GAAI,MAC/B,mCAAeW,KAAM,CAACR,EAAQC,QAQ5B,QAGJ,yBAAKH,UAAU,kCACb,oDACA,yBAAKA,UAAU,6BACb,yBACEA,UAAU,cACVW,MAAO,CAAEC,gBAAiB,WAC1BC,QAAS,kBAAM1B,EAAcP,MAE/B,yBACEoB,UAAU,cACVW,MAAO,CAAEC,gBAAiB,WAC1BC,QAAS,kBAAM1B,EAAcN,MAE/B,yBACEmB,UAAU,cACVW,MAAO,CAAEC,gBAAiB,WAC1BC,QAAS,kBAAM1B,EAAcV,UCnFrBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.90bc729e.chunk.js","sourcesContent":["import React, { Suspense, useState } from \"react\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { Canvas, extend, useThree, useLoader, Dom } from \"react-three-fiber\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nextend({ OrbitControls });\n\nconst defaultCameraPositions = {\n  px: 0.47856748561778645,\n  rx: -2.75498783175586,\n  py: 0.37579497215950963,\n  ry: 0.534669096966282,\n  pz: -0.8481077970051053,\n  rz: 2.919532627963722\n};\nconst texture1 = new THREE.TextureLoader().load(\"assets/textures/Image_1.png\");\nconst texture2 = new THREE.TextureLoader().load(\"assets/textures/Image_2.png\");\nconst texture3 = new THREE.TextureLoader().load(\"assets/textures/Image_3.png\");\ntexture1.flipY = false;\ntexture2.flipY = false;\ntexture3.flipY = false;\n\nfunction App() {\n  const [cameraPos] = useState(defaultCameraPositions);\n  const [currentTex, setCurrentTex] = useState(0);\n\n  function Asset({ url }) {\n    const gltf = useLoader(GLTFLoader, url);\n    if (currentTex !== 0) {\n      gltf.materials.default.map = currentTex;\n    }\n    return (\n      <primitive\n        object={gltf.scene}\n        dispose={null}\n        position={new THREE.Vector3(0, -0.45, 0)}\n      />\n    );\n  }\n\n  const Scene = () => {\n    const {\n      camera,\n      gl: { domElement }\n    } = useThree();\n\n    camera.position.x = cameraPos.px;\n    camera.rotation.x = cameraPos.rx;\n    camera.position.y = cameraPos.py;\n    camera.rotation.y = cameraPos.ry;\n    camera.position.z = cameraPos.pz;\n    camera.rotation.z = cameraPos.rz;\n\n    return (\n      <>\n        <Suspense\n          fallback={\n            <Dom position={new THREE.Vector3(0.31, 0.1, 0)}>\n              <h1>Loading</h1>\n            </Dom>\n          }\n        >\n          <Asset url=\"assets/objects/Mavi_sandalye.glb\" />\n        </Suspense>\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <orbitControls args={[camera, domElement]} />\n      </>\n    );\n  };\n  return (\n    <div className=\"main-container\">\n      <div className=\"viewport-container\">\n        <Canvas>\n          <Scene />\n        </Canvas>\n      </div>\n      <div className=\"modificaiton-buttons-container\">\n        <div>Renk Se√ßenekleri</div>\n        <div className=\"color-selection-container\">\n          <div\n            className=\"colorButton\"\n            style={{ backgroundColor: \"#013000\" }}\n            onClick={() => setCurrentTex(texture2)}\n          ></div>\n          <div\n            className=\"colorButton\"\n            style={{ backgroundColor: \"#300001\" }}\n            onClick={() => setCurrentTex(texture3)}\n          ></div>\n          <div\n            className=\"colorButton\"\n            style={{ backgroundColor: \"#0039A1\" }}\n            onClick={() => setCurrentTex(texture1)}\n          ></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}